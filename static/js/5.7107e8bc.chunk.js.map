{"version":3,"sources":["components/NavBar/ForecastDayLink/ForecastDayLink.module.scss","components/NavBar/ForecastDayLink/index.js","components/NavBar/NavList.js"],"names":["module","exports","ForecastDayLink","icon","day","date","monthDay","minTemp","maxTemp","className","link_item","to","pathname","toLocaleDateString","month","year","weekDay","link","wi_link_icon","day_link__temps","day_hi__temp","Math","floor","day_low__temp","day_link__date","NavList","dailyForecast","useContext","WeatherAppContext","slice","map","index","dt","temp","min","max","id","weather","Date","err","Error","console","error","message","weekday","isToday","isTomorrow","dateFormat","getDateInfo"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,aAAe,sCAAsC,aAAe,sCAAsC,cAAgB,uCAAuC,UAAY,mCAAmC,KAAO,8BAA8B,gBAAkB,yCAAyC,eAAiB,0C,wGCwDpUC,EA5CS,SAAC,GAOlB,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,IACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,QACAC,EACI,EADJA,QAGA,OAME,aALA,CAKA,MAAIC,UAAWC,YAAf,SACE,eAAC,IAAD,CACEC,GAAI,CACFC,SAAS,2BAAD,OAA6BP,EAAKQ,mBAAmB,QAAS,CAACT,IAAK,UAAWU,MAAO,UAAWC,KAAM,aAC/GC,QAASZ,GAEXK,UAAWQ,OALb,UAOE,mBAAGR,UAAS,oBAAeN,EAAf,YAAuBe,kBACnC,oBAAGT,UAAWU,kBAAd,UACE,uBAAMV,UAAWW,eAAjB,UACGC,KAAKC,MAAMd,GACZ,mBAAGC,UAAU,wBAEf,uBAAMA,UAAWc,gBAAjB,UACGF,KAAKC,MAAMf,GACZ,mBAAGE,UAAU,2BAGjB,sBAAKA,UAAWe,iBAAhB,UACE,+BAAOpB,IACP,+BAAOE,OAET,cAAC,IAAD,UCWOmB,UA5BC,WAAO,IACbC,EAAkBC,qBAAWC,KAA7BF,cAER,OACE,6BACIA,GACAA,EACGG,MAAM,EAAG,GACTC,KAAI,WAAgDC,GAAW,IAAxDC,EAAuD,EAAvDA,GAAuD,IAAnDC,KAAQC,EAA2C,EAA3CA,IAAKC,EAAsC,EAAtCA,IAAmBC,EAAmB,cAA/BC,QAA+B,MAAnBD,GAAmB,EAhCrD,SAAC/B,GACnB,KAAMA,aAAgBiC,MAAO,CAC3B,IAAMC,EAAM,IAAIC,MACd,kFAGF,OAAOC,QAAQC,MAAMH,EAAII,SAe3B,MAAO,CAAEtC,OAAMuC,QAVXC,YAAQxC,GACA,QACDyC,YAAWzC,GACV,WAEA0C,YAAW1C,EAAM,CAAEuC,QAAS,SAKhBtC,SAFPyC,YAAW1C,EAAM,CAAES,MAAO,UAAWV,IAAK,aAcb4C,CAC3B,IAAPhB,GAAY,IAAIM,KAAU,IAALN,IADf3B,EADqD,EACrDA,KAAMuC,EAD+C,EAC/CA,QAAStC,EADsC,EACtCA,SAGvB,OACE,cAAC,EAAD,CAEED,KAAMA,EACND,IAAKwC,EACLzC,KAAMiC,EACN7B,QAAS2B,EACT1B,QAAS2B,EACT7B,SAAUA,GANLyB,OASJ","file":"static/js/5.7107e8bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wi_link_icon\":\"ForecastDayLink_wi_link_icon__28b6k\",\"day_hi__temp\":\"ForecastDayLink_day_hi__temp__yhSUS\",\"day_low__temp\":\"ForecastDayLink_day_low__temp__36Yi8\",\"link_item\":\"ForecastDayLink_link_item__DKH4u\",\"link\":\"ForecastDayLink_link__3Vxga\",\"day_link__temps\":\"ForecastDayLink_day_link__temps__1vcmz\",\"day_link__date\":\"ForecastDayLink_day_link__date__1yk8s\"};","import { BsChevronCompactRight } from 'react-icons/bs';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport {\r\n  link_item,\r\n  link,\r\n  day_link__temps,\r\n  day_hi__temp,\r\n  day_low__temp,\r\n  wi_link_icon,\r\n  day_link__date,\r\n} from './ForecastDayLink.module.scss';\r\n\r\nconst ForecastDayLink = ({\r\n  icon,\r\n  day,\r\n  date,\r\n  monthDay,\r\n  minTemp,\r\n  maxTemp,\r\n}) => {\r\n  \r\n  return (\r\n    /**\r\n     * TODO:\r\n     *  Interpolate a variable in pathname to use the query for generating\r\n     *    hourly data instead of a separate prop.\r\n     */\r\n    <li className={link_item}>\r\n      <Link\r\n        to={{\r\n          pathname: `/forecast-in-depth/?day=${date.toLocaleDateString('en-US', {day: 'numeric', month: 'numeric', year: 'numeric'})}`,\r\n          weekDay: day,\r\n        }}\r\n        className={link}\r\n      >\r\n        <i className={`wi wi-owm-${icon} ${wi_link_icon}`}></i>\r\n        <p className={day_link__temps}>\r\n          <span className={day_hi__temp}>\r\n            {Math.floor(maxTemp)}\r\n            <i className='wi wi-fahrenheit'></i>\r\n          </span>\r\n          <span className={day_low__temp}>\r\n            {Math.floor(minTemp)}\r\n            <i className='wi wi-fahrenheit'></i>\r\n          </span>\r\n        </p>\r\n        <div className={day_link__date}>\r\n          <span>{day}</span>\r\n          <span>{monthDay}</span>\r\n        </div>\r\n        <BsChevronCompactRight />\r\n      </Link>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ForecastDayLink;\r\n","import { useContext } from 'react';\r\nimport { dateFormat, isToday, isTomorrow } from '../../utils';\r\nimport { WeatherAppContext } from '../Context';\r\nimport ForecastDayLink from './ForecastDayLink';\r\n\r\n/**\r\n * Function to return an object of date formats\r\n * @param {Object} date - the Date object passed in\r\n * @return {Object} The date formats to desconstruct on invoke\r\n */\r\nconst getDateInfo = (date) => {\r\n  if (!(date instanceof Date)) {\r\n    const err = new Error(\r\n      'The provided argument for the getDateInfo function is not a valid Date object.'\r\n    );\r\n\r\n    return console.error(err.message);\r\n  }\r\n\r\n  let weekday;\r\n\r\n  if (isToday(date)) {\r\n    weekday = 'Today';\r\n  } else if (isTomorrow(date)) {\r\n    weekday = 'Tomorrow';\r\n  } else {\r\n    weekday = dateFormat(date, { weekday: 'long' });\r\n  }\r\n\r\n  const monthDay = dateFormat(date, { month: 'numeric', day: 'numeric' });\r\n\r\n  return { date, weekday, monthDay };\r\n};\r\n\r\nconst NavList = () => {\r\n  const { dailyForecast } = useContext(WeatherAppContext);\r\n\r\n  return (\r\n    <ul>\r\n      {(dailyForecast &&\r\n        dailyForecast\r\n          .slice(0, 5)\r\n          .map(({ dt, temp: { min, max }, weather: [{ id }] }, index) => {\r\n            const { date, weekday, monthDay } = getDateInfo(\r\n              dt !== 0 && new Date(dt * 1000)\r\n            );\r\n            return (\r\n              <ForecastDayLink\r\n                key={index}\r\n                date={date}\r\n                day={weekday}\r\n                icon={id}\r\n                minTemp={min}\r\n                maxTemp={max}\r\n                monthDay={monthDay}\r\n              />\r\n            );\r\n          })) || <h2>Loading...</h2>}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default NavList;\r\n"],"sourceRoot":""}