{"version":3,"sources":["components/NavBar/Header/Header.module.scss","utils.js","components/Main/Main.module.scss","components/NavBar/Header/index.js","components/NavBar/index.js","components/Main/index.js","components/ErrorBoundary.js","App.js","reportWebVitals.js","index.js","hooks/useCurrentLocation.js","components/Context/index.js"],"names":["module","exports","dateFormat","date","options","err","Error","message","Intl","DateTimeFormat","format","error","console","fetchData","url","stateFunc","a","axios","get","then","data","isToday","thisDate","Date","getDate","isTomorrow","Header","useContext","WeatherAppContext","currentAddress","locationErr","locality","principalSubdivision","className","header","site_title","city_name","NavList","lazy","NavBar","style","background","flex","fallback","CurrentForecast","ForecastInDepth","Main","main","exact","path","component","ErrorBoundary","props","state","hasError","this","children","Component","App","currentForecast","useEffect","dt","getHours","document","documentElement","setProperty","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","getElementById","useCurrentLocation","useState","locationError","setError","longitude","latitude","location","setLocation","handleSuccess","position","coords","handleError","navigator","geolocation","getCurrentPosition","createContext","Provider","setAddress","oneCall","setOneCall","oneCallUrl","reverseGeoUrl","value","current","dailyForecast","daily","hourForecast","hourly"],"mappings":"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","file":"static/js/main.d78b2b48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"site_title\":\"Header_site_title__14eoe\",\"city_name\":\"Header_city_name__oyyvI\",\"header\":\"Header_header__3gxUX\"};","import axios from 'axios';\r\n\r\n/**\r\n * Function to simplify the process of formatting a Date instance\r\n * @param {number | Date} date The Date object (What's passed to the 'format()' method)\r\n * @param {Object} options Option for formatting, passed in as an object\r\n * @returns {string | Error} Returns either thrown error or the formatted date\r\n */\r\nexport const dateFormat = (date, options) => {\r\n  try {\r\n    const err = new Error();\r\n\r\n    if (typeof date !== 'object' && typeof date !== 'number') {\r\n      err.message =\r\n        'Date param must be the Date object or a number in dateFormat function';\r\n      throw err;\r\n    }\r\n\r\n    if (typeof options !== 'object') {\r\n      err.message =\r\n        'Options param must be an object of valid key/values in dateFormat function';\r\n      throw err;\r\n    }\r\n\r\n    return new Intl.DateTimeFormat('en-US', options).format(date);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Function to run API call and set state with the returned data.\r\n * @param {String} url - the API Url\r\n * @param {Function} stateFunc - function created from a useState()\r\n */\r\nexport async function fetchData(url, stateFunc) {\r\n  try {\r\n    await axios.get(url).then((data) => stateFunc(data.data));\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n}\r\n\r\nexport function isToday(date) {\r\n  let thisDate;\r\n  if (date instanceof Date) {\r\n    thisDate = date.getDate();\r\n  }\r\n\r\n  return thisDate === new Date().getDate();\r\n}\r\n\r\nexport function isTomorrow(date) {\r\n  let thisDate;\r\n  if (date instanceof Date) {\r\n    thisDate = date.getDate();\r\n  }\r\n\r\n  return thisDate === new Date().getDate() + 1;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__347n-\"};","import { useContext } from 'react';\r\nimport { WeatherAppContext } from '../../Context';\r\n\r\nimport { header, site_title, city_name } from './Header.module.scss';\r\n\r\nconst Header = () => {\r\n  const { currentAddress, locationErr } = useContext(WeatherAppContext);\r\n  const { locality, principalSubdivision } = currentAddress;\r\n\r\n  return (\r\n    <header className={header}>\r\n      <h1 className={site_title}>5-Day Weather Forecast</h1>\r\n      <h2 className={city_name}>\r\n        {!locality\r\n          ? 'City Not Available'\r\n          : `${locality}, ${principalSubdivision}`}\r\n        {locationErr && <p>Location Error: {locationErr}</p>}\r\n      </h2>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { lazy, Suspense } from 'react';\r\nimport Header from './Header';\r\nconst NavList = lazy(() => import('./NavList'));\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <nav style={{ background: '#fff', flex: 1 }}>\r\n      <Header />\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <NavList />\r\n      </Suspense>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { lazy, Suspense } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { main } from './Main.module.scss';\r\nconst CurrentForecast = lazy(() => import('./CurrentForecast'));\r\nconst ForecastInDepth = lazy(() => import('./ForecastInDepth'));\r\n\r\nconst Main = () => {\r\n  return (\r\n    <main className={main}>\r\n      <Suspense fallback={<h2>Loading...</h2>}>\r\n        <Switch>\r\n          <Route exact path='/' component={CurrentForecast} />\r\n          <Route path='/forecast-in-depth/:index' component={ForecastInDepth} />\r\n        </Switch>\r\n      </Suspense>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import NavBar from './components/NavBar';\r\nimport Main from './components/Main';\r\n\r\nimport './css/weather-icons.min.css';\r\nimport './global_styles/base.scss';\r\nimport ErrorBoundary from './components/ErrorBoundary';\r\nimport { useContext, useEffect } from 'react';\r\nimport { WeatherAppContext } from './components/Context';\r\n\r\nfunction App() {\r\n  const { currentForecast } = useContext(WeatherAppContext);\r\n\r\n  useEffect(() => {\r\n    if (currentForecast) {\r\n      const {dt} = currentForecast;\r\n      const date = new Date(dt * 1000);\r\n      if (date.getHours() >= 18 || date.getHours() < 6) {\r\n        document.documentElement.style.setProperty('--current-time-color', 'var(--night-body-color)')\r\n      } else {\r\n        document.documentElement.style.setProperty('--current-time-color', 'var(--day-body-color)')\r\n      }\r\n    }\r\n  }, [currentForecast]);\r\n  return (\r\n    <div className='app-container'>\r\n      <div className='app-wrapper'>\r\n        <ErrorBoundary>\r\n          <NavBar />\r\n          <Main />\r\n        </ErrorBoundary>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from './components/Context';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider>\n      <Router basename='/weather-app-react'>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useEffect, useState } from 'react';\r\n\r\n// This Custom Hook provided by Norbert Bartos:\r\n// https://norbertbartos.tech/blog/use-geolocation-api-with-react-hooks/\r\nconst useCurrentLocation = () => {\r\n  // store error message in state\r\n  const [locationError, setError] = useState();\r\n\r\n  // store location in state\r\n  const [location, setLocation] = useState({\r\n    longitude: 0,\r\n    latitude: 0,\r\n  });\r\n\r\n  // Success handler for geolocation's 'getCurrentPosition' method\r\n  const handleSuccess = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n\r\n    setLocation({\r\n      latitude,\r\n      longitude,\r\n    });\r\n  };\r\n\r\n  // Error handler for geolocation's 'getCurrentPosition' method\r\n  const handleError = (error) => {\r\n    setError(error.message);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // If the geolocation is not defined in the used browser you can handle it as an error\r\n    if (!navigator.geolocation) {\r\n      setError('Geolocation is not supported.');\r\n      return;\r\n    }\r\n\r\n    // Call the Geolocation API\r\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\r\n  }, []);\r\n\r\n  return { location, locationError };\r\n};\r\n\r\nexport default useCurrentLocation;\r\n","import { createContext, useEffect, useState } from 'react';\r\nimport useCurrentLocation from '../../hooks/useCurrentLocation';\r\nimport { fetchData } from '../../utils';\r\n\r\nexport const WeatherAppContext = createContext();\r\n\r\nexport const Provider = ({ children }) => {\r\n  const { location, locationError } = useCurrentLocation();\r\n\r\n  const [currentAddress, setAddress] = useState({});\r\n\r\n  const [oneCall, setOneCall] = useState({});\r\n\r\n  useEffect(() => {\r\n    const { longitude, latitude } = location;\r\n    // Get city and state from geo coordinates generated from useCurrentLocation hook\r\n\r\n    const weatherAPIKey = '79709e9bb8ffe2a8b3e3ef6b8f3be053';\r\n\r\n    const oneCallUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={minutely}&units=imperial&appid=${weatherAPIKey}`;\r\n    const reverseGeoUrl = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`;\r\n\r\n    fetchData(reverseGeoUrl, setAddress);\r\n    fetchData(oneCallUrl, setOneCall);\r\n  }, [location]);\r\n\r\n  return (\r\n    <WeatherAppContext.Provider\r\n      value={{\r\n        currentForecast: oneCall.current,\r\n        currentAddress,\r\n        locationErr: locationError,\r\n        dailyForecast: oneCall.daily,\r\n        hourForecast: oneCall.hourly,\r\n      }}\r\n    >\r\n      {children}\r\n    </WeatherAppContext.Provider>\r\n  );\r\n};\r\n"],"sourceRoot":""}